<?xml version= "1.0" encoding ="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:jms="http://www.springframework.org/schema/jms" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
  <!-- 持久化配置 begin -->
  <!-- 配置数据源 -->
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <!-- 基本属性 url、user、password -->
    <property name="driverClassName" value="${jdbc.driverClassName}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />

    <!-- 配置连接池初始化大小、最小、最大 -->
    <property name="initialSize" value="${jdbc.initialSize}" />
    <property name="minIdle" value="${jdbc.minIdle}" />
    <property name="maxActive" value="${jdbc.maxActive}" />
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${jdbc.maxWait}" />
    <!-- mysql可以配置为false -->
    <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />

    <!-- 配置监控统计拦截的filters -->
    <property name="filters" value="${druid.filters}" />
    <!-- <property name="connectionProperties" value="config.decrypt=true"/> -->
  </bean>

  <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
    <property name="databasePlatform" value="${hibernate.dialect}" />
  </bean>

  <!-- Spring Data Jpa配置 , 扫描base-package下所有继承于Repository<T,ID>的接口 -->
  <jpa:repositories base-package="cn.com.dflzm.**.repository" transaction-manager-ref="transactionManager"
    entity-manager-factory-ref="entityManagerFactory" />

  <!-- Jpa Entity Manager 配置 -->
  <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
    depends-on="dataSource">
    <property name="dataSource" ref="dataSource" />
    <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
    <property name="packagesToScan" value="cn.com.dflzm.**.entity" />
    <property name="jpaProperties">
      <props>
        <prop key="hibernate.current_session_context_class">thread</prop>
        <!-- 抓取策略 -->
        <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
        <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
        <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
        <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>

        <!-- 建表的命名规则 -->
        <prop key="hibernate.ejb.naming_strategy">${hibernate.ejb.naming_strategy}</prop>

        <!-- 用于调试的属性 -->
        <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
        <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
        <prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
        <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
        <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
      </props>
    </property>
  </bean>

  <!-- 事务管理器配置, Jpa单数据源事务 -->
  <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactory" />
  </bean>

  <!-- 配置Spring的事务处理 -->
  <!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
  <aop:config>
    <!-- 设置pointCut表示哪些方法要加入事务处理 -->
    <!-- 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常 就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
    <aop:pointcut id="allMethods" expression="execution(* cn.com.dflzm.**.service.**.*(..))" />
    <!-- 通过advisor来确定具体要加入事务控制的方法 -->
    <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
  </aop:config>
  <!-- 配置哪些方法要加入事务控制 -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <!-- 把一些查询之类的方法设置为只读的事务 -->
      <tx:method name="find*" propagation="REQUIRED" read-only="true" />
      <tx:method name="query*" propagation="REQUIRED" read-only="true" />
      <tx:method name="select*" propagation="REQUIRED" read-only="true" />

      <!-- 以下方法都是可能涉及修改的方法，就无法设置为只读 -->
      <tx:method name="add*" propagation="REQUIRED" />
      <tx:method name="save*" propagation="REQUIRED" />
      <tx:method name="create*" propagation="REQUIRED" />
      <tx:method name="insert*" propagation="REQUIRED" />
      <tx:method name="delete*" propagation="REQUIRED" />
      <tx:method name="remove*" propagation="REQUIRED" />
      <tx:method name="modify*" propagation="REQUIRED" />
      <tx:method name="update*" propagation="REQUIRED" />

      <!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
      <tx:method name="*" propagation="REQUIRED" read-only="true" />
    </tx:attributes>
  </tx:advice>
  <!-- 持久化配置 end -->
</beans>
